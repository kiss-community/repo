From 4036b48af2b973eaf8932c1c4216d835d991709c Mon Sep 17 00:00:00 2001
From: illiliti <illiliti@protonmail.com>
Date: Mon, 19 Sep 2022 22:00:12 +0300
Subject: [PATCH] Revert "meson: simplify intl lookups using Meson's builtin
 dependency lookup"

This reverts commit 26435b570f0f55620cc7048f8ee718cce5f90734.
---
 meson.build | 59 +++++++++++++++++++++++++++++------------------------
 1 file changed, 32 insertions(+), 27 deletions(-)

diff --git a/meson.build b/meson.build
index 0599bb8a6..e8f0e636f 100644
--- a/meson.build
+++ b/meson.build
@@ -2107,37 +2107,42 @@ libz_dep = dependency('zlib')
 # FIXME: glib-gettext.m4 has much more checks to detect broken/uncompatible
 # implementations. This could be extended if issues are found in some platforms.
 libintl_deps = []
-libintl = dependency('intl', required: false)
-if libintl.found()
-  # libintl supports different threading APIs, which may not
-  # require additional flags, but it defaults to using pthreads if
-  # found. Meson's "threads" dependency does not allow you to
-  # prefer pthreads. We may not be using pthreads for glib itself
-  # either so just link the library to satisfy libintl rather than
-  # also defining the macros with the -pthread flag.
-  #
-  # Meson's builtin dependency lookup as of 0.60.0 doesn't check for
-  # pthread, so we do this manually here.
-  if cc.has_function('ngettext', dependencies : libintl)
-    libintl_deps += [libintl]
+if cc.has_function('ngettext')
+  have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset')
+else
+  # First just find the bare library.
+  libintl = cc.find_library('intl', required : false)
+  # The bare library probably won't link without help if it's static.
+  if libintl.found() and not cc.has_function('ngettext', dependencies : libintl)
+     libintl_iconv = cc.find_library('iconv', required : false)
+     # libintl supports different threading APIs, which may not
+     # require additional flags, but it defaults to using pthreads if
+     # found. Meson's "threads" dependency does not allow you to
+     # prefer pthreads. We may not be using pthreads for glib itself
+     # either so just link the library to satisfy libintl rather than
+     # also defining the macros with the -pthread flag.
+     libintl_pthread = cc.find_library('pthread', required : false)
+     # Try linking with just libiconv.
+     if libintl_iconv.found() and cc.has_function('ngettext', dependencies : [libintl, libintl_iconv])
+       libintl_deps += [libintl_iconv]
+     # Then also try linking with pthreads.
+     elif libintl_iconv.found() and libintl_pthread.found() and cc.has_function('ngettext', dependencies : [libintl, libintl_iconv, libintl_pthread])
+       libintl_deps += [libintl_iconv, libintl_pthread]
+     else
+       libintl = disabler()
+     endif
+  endif
+  if not libintl.found()
+    libintl = subproject('proxy-libintl').get_variable('intl_dep')
+    libintl_deps = [libintl] + libintl_deps
+    have_bind_textdomain_codeset = true  # proxy-libintl supports it
   else
-    libintl_pthread = cc.find_library('pthread', required : false)
-    if libintl_pthread.found() and cc.has_function('ngettext', dependencies : [libintl, libintl_pthread])
-      libintl_deps += [libintl, libintl_pthread]
-    else
-      libintl = disabler()
-    endif
+    libintl_deps = [libintl] + libintl_deps
+    have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset', 
+                                                   dependencies : libintl_deps)
   endif
 endif
 
-if libintl.found()
-  have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset', dependencies: libintl_deps)
-else
-  libintl = subproject('proxy-libintl').get_variable('intl_dep')
-  libintl_deps = [libintl]
-  have_bind_textdomain_codeset = true  # proxy-libintl supports it
-endif
-
 glib_conf.set('HAVE_BIND_TEXTDOMAIN_CODESET', have_bind_textdomain_codeset)
 
 # We require gettext to always be present
-- 
2.35.1

